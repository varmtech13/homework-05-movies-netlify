{"version":3,"file":"static/js/cast.4fb1f90d.chunk.js","mappings":"0PAGaA,EAAU,OAGVC,EAAQC,EAAAA,GAAAA,GAAH,oEAKLC,EAAOD,EAAAA,GAAAA,GAAH,+FAIRF,GAGII,EAAOF,EAAAA,GAAAA,GAAH,oJAhBI,EAiBeF,GAMvBK,EAAcH,EAAAA,GAAAA,IAAH,qF,SCnBT,SAASI,EAAT,GAA4B,IAAZC,EAAW,EAAXA,QAC7B,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBL,GAASM,KAAKH,EACjC,GAAE,CAACH,KAGF,SAACJ,EAAD,UACGM,EAAOK,OAAS,EACfL,EAAOM,KACL,YAOO,IANLC,EAMI,EANJA,aACAC,EAKI,EALJA,KACAC,EAII,EAJJA,GACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,UACAC,EACI,EADJA,cAEMC,GAAWC,EAAAA,EAAAA,GAAcP,EAAc,QAC7C,OACE,UAACZ,EAAD,YACE,gBAAKoB,IAAKF,EAAUG,IAAKR,EAAMS,MAAM,SACrC,UAACrB,EAAD,YACE,SAACJ,EAAD,UAAQgB,KACR,wCAAgBE,MAChB,uCAAeC,MACf,2CAAmBC,UANZH,EAUd,KAGH,oCAIP,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const COUNT = 5;\nexport const GAP_MAX = '16px';\nexport const GAP_MIN = '10px';\n\nexport const Title = styled.h2`\n  font-size: 18px;\n  margin-bottom: 12px;\n`;\n\nexport const List = styled.ul`\n  margin-top: 48px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: ${GAP_MAX};\n`;\n\nexport const Item = styled.li`\n  width: calc((100% / ${COUNT}) - ${GAP_MAX});\n  box-shadow: 3px 2px 10px 2px #b5b5b5;\n  text-overflow: hidden;\n  min-height: 375px;\n`;\n\nexport const Information = styled.div`\n  padding: 16px;\n  font-size: 12px;\n  font-style: italic;\n`;\n","import { useState, useEffect } from 'react';\nimport { fetchMovieCredits } from '../../services/tmdb-api';\nimport { makeImagePath } from '../../services/makeImagePath';\nimport { Title, List, Item, Information } from './Cast.styled';\nimport PropTypes from 'prop-types';\n\nexport default function Cast({ movieId }) {\n  const [actors, setActors] = useState([]);\n\n  useEffect(() => {\n    fetchMovieCredits(movieId).then(setActors);\n  }, [movieId]);\n\n  return (\n    <List>\n      {actors.length > 0 ? (\n        actors.map(\n          ({\n            profile_path,\n            name,\n            id,\n            popularity,\n            character,\n            original_name,\n          }) => {\n            const imageUrl = makeImagePath(profile_path, 'w185');\n            return (\n              <Item key={id}>\n                <img src={imageUrl} alt={name} width=\"260\" />\n                <Information>\n                  <Title>{name}</Title>\n                  <p>Popularity: {popularity}</p>\n                  <p>Character: {character}</p>\n                  <p>Original name: {original_name}</p>\n                </Information>\n              </Item>\n            );\n          }\n        )\n      ) : (\n        <p>no info</p>\n      )}\n    </List>\n  );\n}\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n"],"names":["GAP_MAX","Title","styled","List","Item","Information","Cast","movieId","useState","actors","setActors","useEffect","fetchMovieCredits","then","length","map","profile_path","name","id","popularity","character","original_name","imageUrl","makeImagePath","src","alt","width"],"sourceRoot":""}